using Microsoft.CodeAnalysis.CSharp.Syntax;
using Patternify.Abstraction.Generators;
using Patternify.Tests.Helpers;

namespace Patternify.Abstraction.Tests.Generators;

public sealed class MainBuilderTests
{
    [Fact]
    internal async Task Build_ForSource_ReturnGeneratedSource()
    {
        // Arrange
        var classSyntax = SyntaxNodeCreator.GetSyntaxNodes<ClassDeclarationSyntax>(Source).First();
        var builder = new TestMainBuilder();

        // Act
        builder.SetUsings(classSyntax);
        builder.SetNamespace(classSyntax);
        builder.SetAccessModifier(classSyntax);
        builder.SetClassName(classSyntax);
        var result = builder.Build();

        // Assert
        await Verify(result);
    }

    [Fact]
    internal async Task Clear_ShouldClearBuilder()
    {
        // Arrange
        var classSyntax = SyntaxNodeCreator.GetSyntaxNodes<ClassDeclarationSyntax>(Source).First();
        var builder = new TestMainBuilder();

        // Act
        builder.SetUsings(classSyntax);
        builder.SetNamespace(classSyntax);
        builder.SetAccessModifier(classSyntax);
        builder.SetClassName(classSyntax);
        builder.Clear();
        var result = builder.Build();

        // Assert
        await Verify(result);
    }

    private class TestMainBuilder : MainBuilder
    {
        protected override string BuildSource() => $$"""
            // <auto-generated/>
            {{Usings}}

            {{Namespace}}

            {{AccessModifier}} partial class {{ClassName}}
            {
            }
            """;
    }

    private const string Source = """
        using Patternify.Singleton;

        namespace Tests;

        [Test]
        public partial class TestClassName
        {
        }
        """;

}
name: CICD

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      
  workflow_dispatch:
    inputs:
      version_type:
        required: true
        default: 'bug'
        type: choice
        options:
        - 'feature'
        - 'bug'
        - 'major'
      is_prerelease:
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  ci:

    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: true

    steps:  
    
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test
      run: dotnet test /p:Configuration=Release --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

  cd:
    needs: [ ci ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      - name: Restore dependencies
        run: dotnet restore

      - name: dotnet pack
        run: |
          dotnet pack --configuration Release \
          /p:NoWarn=NU5105 \
          /p:RepositoryUrl=https://github.com/YourRepo/YourProject \
          /p:RepositoryType=git

      - name: Publish artifacts to GitHub Packages
        run: |
          dotnet nuget push "**/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/YourUsername/index.json --skip-duplicate

      - name: Publish artifacts to NuGet.org
        run: dotnet nuget push "**/*.nupkg" --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Create a GitHub release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ${{ env.NEXT_VERSION }}
          title: "Release version: ${{ env.NEXT_VERSION }}"
          prerelease: ${{ github.event.inputs.is_prerelease == 'true' }}

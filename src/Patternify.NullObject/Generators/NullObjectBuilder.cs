using Microsoft.CodeAnalysis.CSharp.Syntax;
using Patternify.Abstraction.Generators;
using Patternify.NullObject.Generators.Helpers;
using System.Text;

namespace Patternify.NullObject.Generators;

internal sealed class NullObjectBuilder : MainBuilder
{
    private readonly StringBuilder _properties = new();
    private readonly StringBuilder _methods = new();

    internal override void SetClassName(InterfaceDeclarationSyntax @interface)
    {
        base.SetClassName(@interface);
        ClassName.Append("NullObject");
    }

    internal void SetProperties(InterfaceDeclarationSyntax @interface)
    {
        _properties.AppendLine(string.Join("\n\t", PropertyGeneratorHelper.GetPropertiesSource(@interface)));
    }

    internal void SetMethods(InterfaceDeclarationSyntax group)
    {
        var voidMethodSource = MethodGeneratorHelper.GetVoidMethodsSource(group);
        var notVoidMethodSource = MethodGeneratorHelper.GetNotVoidMethodsSource(group);

        _methods.AppendLine(string.Join("\n\n\t", voidMethodSource));
        _methods.AppendLine("\t");
        _methods.AppendLine(string.Join("\n\n", notVoidMethodSource));
    }

    internal override void Clear()
    {
        base.Clear();
        _properties.Clear();
        _methods.Clear();
    }

    protected override string BuildSource() =>
        $$"""
          // <auto-generated/>
          {{Usings}}

          {{Namespace}}

          {{AccessModifier}} class {{ClassName}} : {{InterfaceName}}
          {
              {{_properties}}
              {{_methods}}
          }
          """;

    protected override bool IsEmpty() =>
        Usings.Length == 0 &&
        Namespace.Length == 0 &&
        AccessModifier.Length == 0 &&
        ClassName.Length == 0 &&
        InterfaceName.Length == 0;
}
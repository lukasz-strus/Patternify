using Microsoft.CodeAnalysis.CSharp.Syntax;
using Patternify.Abstraction.Generators;
using Patternify.Prototype.Generators.Helpers;
using System.Text;

namespace Patternify.Prototype.Generators;

internal sealed class PrototypeBuilder : MainBuilder
{
    private readonly StringBuilder _deepCopyMethod = new();
    private readonly StringBuilder _shallowCopyMethod = new();

    internal void SetDeepCopyMethod(
        ClassDeclarationSyntax @class,
        ICollection<ClassDeclarationSyntax> allClasses)
    {
        var src =
            $$"""
              {{AccessModifier}} {{ClassName}} DeepCopy()
                  {
                      {{ClassName}} clone = ({{ClassName}})this.ShallowCopy();
                  
                      {{DeepCopyHelper.WriteObjectFieldsClone(@class, allClasses)}}
                  
                      return clone;
                  }
              """;

        _deepCopyMethod.Clear();
        _deepCopyMethod.Append(src);
    }

    internal void SetShallowCopyMethod(ClassDeclarationSyntax @class)
    {
        var src =
            $$"""
              {{AccessModifier}} {{ClassName}} ShallowCopy()
                  {
                      return ({{ClassName}})this.MemberwiseClone();
                  }
              """;

        _shallowCopyMethod.Clear();
        _shallowCopyMethod.Append(src);
    }

    protected override string BuildSource() =>
        $$"""
          // <auto-generated/>
          {{Usings}}

          {{Namespace}}

          {{AccessModifier}} partial class {{ClassName}}
          {
              {{_shallowCopyMethod}}
              
              {{_deepCopyMethod}}
          }
          """;

    protected override bool IsEmpty() =>
        Usings.Length == 0 &&
        Namespace.Length == 0 &&
        AccessModifier.Length == 0 &&
        ClassName.Length == 0;

    internal override void Clear()
    {
        base.Clear();
        _deepCopyMethod.Clear();
        _shallowCopyMethod.Clear();
    }
}